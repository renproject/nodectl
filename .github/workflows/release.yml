name: release
on:
    push:
        tags:
            - '*'
jobs:
    release:
        container: techknowlogick/xgo:latest
        runs-on: ubuntu-latest
        steps:
            - name: Check out code
              uses: actions/checkout@v2
            - name: Get the version
              id: get_version
              run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
            - name: Build the binary
              run: |
                  go build -o nodectl_linux_amd64 -ldflags "-s -w -X main.BinaryVersion=${{ steps.get_version.outputs.VERSION }}"
                  mv nodectl_linux_amd64 ./artifacts/
                  env GOOS=linux CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc-6 CXX=aarch64-linux-gnu-g++-6 GOARCH=arm64 go build -o nodectl_linux_arm -ldflags "-s -w -X main.BinaryVersion=${{ steps.get_version.outputs.VERSION }}"
                  mv nodectl_linux_arm ./artifacts/
                  env GOOS=darwin CGO_ENABLED=1 CC=o64-clang CXX=o64-clang++ GOARCH=amd64 go build -o nodectl_darwin_amd64 -ldflags "-s -w -X main.BinaryVersion=${{ steps.get_version.outputs.VERSION }}"
                  mv nodectl_darwin_amd64 ./artifacts/
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  release_name: ${{ env.VER }}
                  draft: false
                  prerelease: false
            - name: Upload binary for darwin/amd64
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./artifacts/nodectl_darwin_amd64
                  asset_name: nodectl_darwin_amd64
                  asset_content_type: application/octet-stream
            - name: Upload binary for linux/amd64
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./artifacts/nodectl_linux_amd64
                  asset_name: nodectl_linux_amd64
                  asset_content_type: application/octet-stream
            - name: Upload binary for linux/arm
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./artifacts/nodectl_linux_arm
                  asset_name: nodectl_linux_arm
                  asset_content_type: application/octet-stream
            - name: Upload install script
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./artifacts/install.sh
                  asset_name: install.sh
                  asset_content_type: text/x-sh; charset=utf-8
            - name: Upload update script
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./artifacts/update.sh
                  asset_name: update.sh
                  asset_content_type: text/x-sh; charset=utf-8
            - name: Verify the installation process
              run: |
                  curl https://www.github.com/renproject/nodectl/releases/latest/download/install.sh -sSfL | sh
                  export PATH=$PATH:$HOME/.darknode/bin
                  nodectl --version